package co.gov.dafp.sigep2.utils;

import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.io.Serializable;
import java.io.StringWriter;
import java.io.Writer;

import org.apache.log4j.Logger;
/**
* @author Jose Viscaya.
* @version 1.0
* @Class Clase  LoggerSigep.java
* @Proyect SIGEPII
* @Company ADA S.A
* @Module exposicion de servicios Rest
 */
public class LoggerSigep implements Serializable{
	
	private static final long serialVersionUID = 8010383042567130926L;
	
	/** Instance of the class */ 
	private static LoggerSigep instance ;  
	
	/** Logger object reference */
	Logger logger;

	
	/**
	 * the object instance
	 * @return instance of class
	 * @throws Exception 
	 */
	public static LoggerSigep getInstance() { 
		try{
			if(instance==null) 
				instance = new LoggerSigep(); 
		} catch(Exception e){
			instance = new LoggerSigep();
		}
		return instance;
	}


	public InputStream propieries(){		   
		   try {
			return this.getClass().getResource("/co/gov/dafp/sigep2/utils/log4j.properties").openStream();
		} catch (IOException e) {
			return null;
		}
	 }
	/**
	 * 
	 * @author: Jose Viscaya
	 *
	 */
    public void configureAppender (){
	
	}
    
    /**
	 * Method responsible for saving a message in the 
	 * Log at DEBUG level.	 
	 * @param message
	 * @param classe
	 */
	@SuppressWarnings("rawtypes")
	public void debug(String message, Class classe){
		logger = Logger.getLogger(classe);
		logger.debug(message);
	}
	
	/**
	 * Method responsible for saving a message in the 
	 * Log at DEBUG level. 
	 * @param message
	 * @param className
	 */
	public void debug(String message, String className){
		logger = Logger.getLogger(className);
		logger.debug(message);
	}
	
	/**
	 * Method responsible for saving a message in the 
	 * Log at INFO level.	 * 
	 * @param message
	 * @param classe
	 */
	@SuppressWarnings("rawtypes")
	public void info(String message, Class classe){
		logger = Logger.getLogger(classe);
		logger.info(message);
	}
	
	/**
	 * show warning log
	 * @param message message of log
	 * @param classe class of execute.
	 */
	@SuppressWarnings("rawtypes")
	public void warn(String message, Class classe){
		logger = Logger.getLogger(classe);
		logger.warn(message);
	}
	
	/**
	 * Method responsible for saving a message in the 
	 * Log at ERROR level.
	 * 
	 * @param message to print
	 * @param classe name of class
	 */
	@SuppressWarnings("rawtypes")
	public void error(String message, Class classe){
		logger = Logger.getLogger(classe);
		logger.error(message);
	}
	
	/**
	 * method to save the trace of an error 
	 * In the log file.
	 * 
	 * @param aThrowable the Throwable
	 * @param classe class of log
	 */
	@SuppressWarnings("rawtypes")
	public void error(Throwable aThrowable, Class classe){
		logger = Logger.getLogger(classe);
		logger.error(getStackTrace(aThrowable));
	}
	
	
	
	
	/**
	 * Receives an exception and returns a String with the trace that was generated by 
	 * Cause.
	 * 
	 * @param aThrowable
	 * @return the message stack trace
	 */
	public static String getStackTrace(Throwable aThrowable) {
		
		final Writer result = new StringWriter();
		final PrintWriter printWriter = new PrintWriter(result);
		aThrowable.printStackTrace(printWriter);
		return result.toString();
	}
	
}